import cv2
import torch
import numpy as np

# Load the YOLOv5 model from Torch Hub (this requires an internet connection)
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')


# Open the camera (use 0 for default camera, or provide the index for external cameras)
cap = cv2.VideoCapture(0)  # You can also pass a video file path

# Define the labels for vehicles, autorickshaw (auto), and bicycle
VEHICLE_LABELS = ['car', 'motorbike', 'bus', 'truck', 'bicycle', 'autorickshaw']  # Added 'autorickshaw' label

# Function to count vehicles in the detections
def count_vehicles(detections):
    vehicle_count = 0
    for detection in detections:
        if detection['name'] in VEHICLE_LABELS:
            vehicle_count += 1
    return vehicle_count

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Failed to capture video frame")
        break

    # Convert the frame to RGB (required by the model)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Perform vehicle detection
    results = model(rgb_frame)
    detections = results.pandas().xyxy[0].to_dict(orient="records")

    # Count the vehicles in the current frame
    vehicle_count = count_vehicles(detections)

    # Traffic density logic (for simplicity, we classify density based on vehicle count)
    if vehicle_count >= 10:
        density = "High Traffic"
    elif 5 <= vehicle_count < 10:
        density = "Moderate Traffic"
    else:
        density = "Low Traffic"

    # Draw the results on the frame
    for detection in detections:
        if detection['name'] in VEHICLE_LABELS:
            xmin, ymin, xmax, ymax = int(detection['xmin']), int(detection['ymin']), int(detection['xmax']), int(detection['ymax'])
            label = f"{detection['name']} {int(detection['confidence'] * 100)}%"
            cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)
            cv2.putText(frame, label, (xmin, ymin - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

    # Show the traffic density on the frame
    cv2.putText(frame, f"Vehicle Count: {vehicle_count}", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Traffic Density: {density}", (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    # Display the frame with detections
    cv2.imshow('Traffic Density Detection', frame)

    # Press 'q' to exit the loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close windows
cap.release()
cv2.destroyAllWindows()
